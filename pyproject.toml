[build-system]
requires = [
  # sync with setup.py until we discard non-pep-517/518
  "setuptools>=40.0",
  "setuptools-scm",
  "wheel",
  "poetry>=1.0.5"
]
build-backend = "poetry.masonry.api"


[tool.poetry]
name = "tokesim"
version = "0.0.0"
description = "A tool for building shareable Multi-Agent tokenomic models"

license = "Apache 2.0"

authors = [
    "Zane Starr <zcstarr@gmail.com>"
]

readme = 'README.md'  # Markdown files are supported

repository = "https://github.com/tokesim/mesa_behaviors"
homepage = "https://github.com/tokesim/mesa_behaviors"

keywords = ['mesa', 'blockchain', 'tokesim', 'simulation','agent','modeling','mulit-agent', 'tokens']
classifiers = [
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Artificial Intelligence",
        "Topic :: Scientific/Engineering :: Artificial Life",
        "Intended Audience :: Developers",
        "Natural Language :: English",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3 :: Only",
]
packages = [
    { include = "tokesim" }
]
include = [
    "*.txt",
    "*.md"
]
[tool.poetry.dependencies]
python = ">=3.7 <3.8"
mesa = "^0.8.6"
web3 = "^5.7.0"
numpy = "^1.18.2"
jsonschema = "^3.2.0"
humps = "^0.2.2"
requests = "^2.23.0"
mesa-behaviors = "^0.1.0"
mypy_extensions = "^0.4.3"

[tool.poetry.dev-dependencies]
black = "^19.10b0"
mypy = "^0.770"
flake8 = "^3.7.9"
codecov = "^2.0.22"
isort = "^4.3.21"
pytest = "^5.4.1"
docformatter = "^1.3.1"
pytest-cov = "^2.8.1"
mypy-extensions = "^0.4.3"
typing-extensions = "^3.7.4"
tox = "^3.14.6"
python-semantic-release = "^5.2.0"

[tool.poetry.scripts]
toke = 'tokesim.__main__:main'
tokesim = 'tokesim.__main__:main'

[tool.towncrier]
package = "tokesim"
package_dir = "tokesim"
filename = "doc/en/changelog.rst"
directory = "changelog/"
title_format = "tokesim {version} ({project_date})"
issue_format = "`#{issue} <https://github.com/tokesim/tokesim/issues/{issue}>`__"
template = "changelog/_template.rst"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "bugfix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "vendor"
  name = "Vendored Libraries"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "doc"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = true

[tool.black]
line-length = 88 
target-version = ['py37']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = p37,lint,test
[testenv:test]
whitelist_externals = poetry
commands =
    poetry install -v
    poetry run pytest  {toxinidir}/tests 
extras =
    test
    docs: doc
[testenv:lint]
basepython = python3
whitelist_externals = poetry

commands =
    poetry install -v
    poetry run black --check {toxinidir}/tokesim {toxinidir}/tests
    poetry run isort --recursive --check-only --diff {toxinidir}/tokesim {toxinidir}/tests/
    poetry run flake8 {toxinidir}/tokesim/ {toxinidir}/tests
    #poetry run docformatter --pre-summary-newline --check --recursive {toxinidir}/tokesim {toxinidir}/tests
"""

[tool.isort]
line_length = 88 
atomic = true
include_trailing_comma = true
lines_after_imports = 2
multi_line_output = 3
force_grid_wrap=0
use_parentheses = true
not_skip = "__init__.py"
skip_glob = ["*/setup.py", "*.pyi"]
filter_files = true
combine_as_imports = false
force_sort_within_sections = true


[tool.semantic_release]
version_variable = "pyproject.toml:version"
version_source = "commit"
commit_subject = "chore: bumping version to v{version}"
commit_message = ""
commit_author = "Zane <zcstarr@gmail.com>"
build_command = "poetry build"
upload_to_release = "false"
